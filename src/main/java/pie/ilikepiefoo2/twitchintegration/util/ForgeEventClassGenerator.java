package pie.ilikepiefoo2.twitchintegration.util;

import com.github.philippheuer.events4j.core.domain.Event;
import org.reflections.Reflections;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.Parameter;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Set;

public class ForgeEventClassGenerator {
    public static void main( String[] args )
    {
        Reflections reflections = new Reflections("com");
        Set<Class<? extends Event>> classes = reflections.getSubTypesOf(com.github.philippheuer.events4j.core.domain.Event.class);
        System.out.println(classes.size());
        classes.stream().forEach( subject ->{
            //System.out.println(subject.getName());
            //System.out.println(subject.getDeclaredFields().length);
            //System.out.println(subject.getDeclaredMethods().length);
            //System.out.println(toJavaFile(subject));
            //generateFEFile(subject);

            printEventHandlerHook(subject);

        });
    }

    private static void generateFEFile(Class<? extends Event> subject)
    {
        if(Modifier.isPublic(subject.getModifiers())) {
            try {
                saveToFile("src/main/java/pie/ilikepiefoo2/twitchintegration/events/autogenerated/" + subject.getPackage().getName().replace(".", "/") + "/" + subject.getSimpleName() + "FE.java", toJavaFile(subject));
            } catch (IOException e) {
                System.out.println(e);
                e.printStackTrace();
            }
        }
    }
    private static void printEventHandlerHook(Class<? extends Event> subject)
    {
        if(Modifier.isPublic(subject.getModifiers())) {
            System.out.println(
                    String.format("%s.getEventManager().onEvent( %s.class, event -> { MinecraftForge.EVENT_BUS.post( new pie.ilikepiefoo2.twitchintegration.events.autogenerated.%s.%sFE(event) ); } );",
                            "twitchClient",
                            subject.getName().replace("$", "."),
                            subject.getPackage().getName(),
                            subject.getSimpleName().replace("$", ".")
                    )
            );
        }
    }

    private static void saveToFile(String path, String content) throws IOException
    {
        File file = new File(path).getAbsoluteFile();
        System.out.println(file.getPath());
        file.getParentFile().mkdirs();
        BufferedWriter writer = null;
        writer = new BufferedWriter(new FileWriter(file));
        writer.write(content);
        writer.close();
    }

    private static <T extends Event> String toJavaFile(Class<T> subject)
    {
        StringBuilder builder = new StringBuilder();
        String newClassName = subject.getSimpleName()+"FE";
        // Package
        builder.append("package pie.ilikepiefoo2.twitchintegration.events.autogenerated.");
        builder.append(subject.getPackage().getName());
        builder.append(";\n\n\n");

        // Class
        if(subject.getAnnotation(Deprecated.class) != null)
            builder.append("@Deprecated\n");
        builder.append("public class ");
        builder.append(newClassName);
        builder.append(" extends net.minecraftforge.eventbus.api.Event {\n");
        // Event field
        builder.append("    public final ");
        builder.append(subject.getName());
        builder.append(" event;\n\n");

        // Constructor
        builder.append("    public ");
        builder.append(newClassName);
        builder.append("( ");
        builder.append(subject.getName());
        builder.append(" event )\n    {\n        this.event = event;\n    }\n\n");

        // Methods
        for(Method method : Arrays.stream(subject.getMethods()).sorted(Comparator.comparing(Method::getName)).toList()){
            appendMethod(builder, method);
        }

        // Closing Bracket
        builder.append("\n}\n");
        return builder.toString();
    }

    private static void appendMethod( StringBuilder builder, Method method)
    {
        if(Modifier.isPublic(method.getModifiers()) && !method.getDeclaringClass().equals(Object.class) && !Modifier.isVolatile(method.getModifiers())) {
            StringBuilder paramBuilder = new StringBuilder("");
            if(method.getAnnotation(Deprecated.class) != null)
                builder.append("    @Deprecated\n");
            builder.append("    ");
            builder.append(Modifier.toString(method.getModifiers()));
            builder.append(" ");
            builder.append(method.getReturnType().getName().replace("$","."));
            builder.append(" ");
            builder.append(method.getName());
            builder.append("( ");
            Parameter parameter;
            Parameter[] parameters = method.getParameters();
            for(int i=0; i<method.getParameterCount(); i++){
                parameter = parameters[i];
                builder.append(parameter.getType().getName().replace("$","."));
                builder.append(" ");
                paramBuilder.append("arg");
                paramBuilder.append(i);
                builder.append("arg");
                builder.append(i);
                if(i!=method.getParameterCount()-1) {
                    builder.append(",");
                    paramBuilder.append(",");
                }
                builder.append(" ");
            }
            builder.append(") // Declaring Class: ");
            builder.append(method.getDeclaringClass().getName());
            builder.append("\n    {\n        ");
            if(!method.getReturnType().equals(Void.TYPE)){
                builder.append("return ");
            }
            builder.append("this.event.");
            builder.append(method.getName());
            builder.append("( ");
            builder.append(paramBuilder);
            builder.append(" );");
            builder.append("\n    }\n");

        }
    }
}
